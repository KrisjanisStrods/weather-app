{"version":3,"sources":["Collapsible.jsx","data.js","App.js","reportWebVitals.js","index.js"],"names":["HourlyTemp","temp","hour","adjustedHour","className","Collapsible","day","dayTemp","nightTemp","avgHumidity","tempByHour","useState","isShown","setIsShown","onClick","prev","map","process","REACT_APP_API_KEY","REACT_APP_DEFAULT_LAT","REACT_APP_DEFAULT_LON","DISPLAYED_HOURS","contstructReoccuringItem","entry","Date","dt","getHours","Math","round","main","humidity","constructNewDay","getDay","recurring","sortDataByDays","currentDay","list","sortedList","i","length","entryDay","push","getAverage","tempList","reduce","a","b","parseData","acc","dayTemperatures","nightTemperatures","averageDayTemp","averageNightTemp","averageHumidity","filter","item","includes","cb","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","location","lat","coords","latitude","lon","longitude","console","error","message","window","fetch","then","res","json","data","sortedData","parsedData","log","DataLayer","App","setData","useEffect","getLocationData","receivedData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b01ec706.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction HourlyTemp({\r\n  temp=\"N/A\",\r\n  hour,\r\n}) {\r\n  const adjustedHour = hour >= 0 && hour <= 23 ? `${hour}:00` : \"N/A\";\r\n  return (\r\n    <>\r\n      <div className=\"temperature-by-hour\">\r\n        <div>{temp}°C</div>\r\n        <div className=\"hour\">{adjustedHour}</div>\r\n      </div>\r\n      <div className=\"temperature-spacer\"/>  \r\n    </>\r\n  )\r\n}\r\n\r\nfunction Collapsible ({\r\n  day,\r\n  dayTemp,\r\n  nightTemp,\r\n  avgHumidity,\r\n  tempByHour = [],\r\n}) {\r\n  const [isShown, setIsShown] = useState(false)\r\n  return (\r\n    <div className={isShown ? \"collapsible-card show\" : \"collapsible-card\"}>\r\n      <div className=\"card-row light\" onClick={() => setIsShown(prev => !prev)}>\r\n        <div className=\"row-title\">{day}</div>\r\n        <div className=\"row-body\">\r\n          <div className=\"general-info\">\r\n            <div>\r\n              <span className=\"day-temperature\">{dayTemp}°C</span>\r\n              <span className=\"night-temperature\"> / {nightTemp}°C</span>\r\n            </div>\r\n            <div className=\"humidity\" >Avg. Humidity: {avgHumidity}%</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row-body-spacer\"/>\r\n        <div className=\"row-misc\">\r\n          <span className={isShown ? \"collapse-icon up\" : \"collapse-icon\"}>▼</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"card-row\">\r\n        <div className=\"row-title\" />\r\n          { tempByHour.map(({ temp, hour }) => <HourlyTemp temp={temp} hour={hour} />) }\r\n        <div className=\"temperature-spacer-end\"/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Collapsible;","const {\r\n  REACT_APP_API_KEY,\r\n  REACT_APP_DEFAULT_LAT,\r\n  REACT_APP_DEFAULT_LON,\r\n} = process.env\r\n\r\nconst DISPLAYED_HOURS = [0, 5, 6, 11, 12, 17, 18, 23];\r\n\r\nfunction contstructReoccuringItem(entry) {\r\n  return {\r\n    hour: new Date(entry.dt * 1000).getHours(),\r\n    temp: Math.round(entry.main.temp),\r\n    humidity: entry.main.humidity,\r\n  }\r\n}\r\n\r\nfunction constructNewDay(entry) {\r\n  const dayMapping = {\r\n    1: \"MONDAY\",\r\n    2: \"TUESDAY\",\r\n    3: \"WEDNESDAY\",\r\n    4: \"THURSDAY\",\r\n    5: \"FRIDAY\",\r\n    6: \"SATURDAY\",\r\n    7: \"SUNDAY\",\r\n  }\r\n  \r\n  return {\r\n    day: dayMapping[new Date(entry.dt * 1000).getDay()],\r\n    recurring: [ contstructReoccuringItem(entry) ],\r\n  }\r\n}\r\n\r\n/**\r\n* Function that sorts given list data by days\r\n*/\r\nfunction sortDataByDays(list = []) {\r\n  let currentDay;\r\n  const sortedList = [];\r\n\r\n  for(let i = 0; i < list.length; i++) {\r\n    const entry = list[i];\r\n    const entryDay = new Date(entry.dt * 1000).getDay();\r\n\r\n    if (entryDay === currentDay) {\r\n      sortedList[sortedList.length-1].recurring.push(contstructReoccuringItem(entry))\r\n    } else {\r\n      sortedList.push(constructNewDay(entry))\r\n      currentDay = entryDay;\r\n    }\r\n  }\r\n\r\n  return sortedList;\r\n}\r\n\r\nfunction getAverage(tempList) {\r\n  return Math.round(tempList.reduce((a, b) => a + b, 0) / tempList.length)\r\n}\r\n\r\n/**\r\n* @param {Array} sortedList Array of object with keys: day, recurring\r\n* @returns {Array} Array of object with keys: day, recurring, averageDayTemp, averageNightTemp, averageHumidity\r\n*/\r\nfunction parseData(sortedList) {\r\n  return sortedList.map(entry => {\r\n    const { dayTemperatures, nightTemperatures, humidity } = entry.recurring\r\n      .reduce((acc, { hour, temp, humidity } ) =>  {\r\n        if (hour >= 8 && hour <= 18) {\r\n          acc.dayTemperatures.push(temp)\r\n        } else {\r\n          acc.nightTemperatures.push(temp)\r\n        }\r\n        acc.humidity.push(humidity);\r\n\r\n        return acc;\r\n      }, { dayTemperatures: [], nightTemperatures: [], humidity: [] });\r\n\r\n    return {\r\n      ...entry,\r\n      averageDayTemp: dayTemperatures.length > 0 ?  getAverage(dayTemperatures) : 'N/A',\r\n      averageNightTemp: nightTemperatures.length > 0 ?  getAverage(nightTemperatures) : 'N/A',\r\n      averageHumidity: humidity.length > 0 ?  getAverage(humidity) : 'N/A',\r\n      recurring: entry.recurring.filter(item => DISPLAYED_HOURS.includes(item.hour))\r\n    }\r\n  })\r\n}\r\n\r\nexport async function getLocationData(cb) {\r\n  // Get location\r\n  let location;\r\n  try {\r\n    const position = await new Promise((resolve, reject) => \r\n      navigator.geolocation.getCurrentPosition(resolve, reject)\r\n    );\r\n    location = {\r\n      lat: position.coords.latitude,\r\n      lon: position.coords.longitude,\r\n    }\r\n  } catch (err) {\r\n    console.error(err.message);\r\n    location = {\r\n      lat: REACT_APP_DEFAULT_LAT,\r\n      lon: REACT_APP_DEFAULT_LON,\r\n    }\r\n  }\r\n\r\n  // Get location based data\r\n  window\r\n    .fetch(\r\n      `http://api.openweathermap.org/data/2.5/forecast?lat=${location.lat}&lon=${location.lon}&appid=${REACT_APP_API_KEY}&units=metric`,\r\n    )\r\n    .then((res) => res.json())\r\n    .then(data => {\r\n      const sortedData = sortDataByDays(data.list);\r\n      const parsedData = parseData(sortedData);\r\n      console.log(' data.list', sortedData)\r\n      cb(parsedData)\r\n    })\r\n}","import React, { useState, useEffect } from 'react';\nimport Collapsible from './Collapsible';\nimport { getLocationData } from './data';\nimport './App.scss';\n\nfunction DataLayer({ data }) {\n  console.log(data)\n  return data.length > 0 \n    ? data.map(({ day, averageDayTemp, averageNightTemp, averageHumidity, recurring }) => (\n      <Collapsible\n        day={day}\n        dayTemp={averageDayTemp}\n        nightTemp={averageNightTemp}\n        avgHumidity={averageHumidity}\n        tempByHour={recurring}\n      />\n    ))\n    : <h1>Oops. Something went wrong.</h1>\n}\n\nfunction App() {\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    getLocationData((receivedData) => setData(receivedData));\n  }, []);\n  \n  return (\n    <div className=\"main-wrapper\">\n      {\n        data\n        ? <DataLayer data={data} />\t\n        :  <div className=\"loading\">...acquiring location</div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}